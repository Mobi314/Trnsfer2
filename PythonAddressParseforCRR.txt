from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(xml_string):
    """
    Given a string (xml_string), find the first occurrence of 'address1' and 'countryName'
    AFTER 'Company Registered Address'. Return '<address1>, <countryName>' or None if not found.
    """
    if not xml_string or not isinstance(xml_string, str):
        return None
    
    # Regex anchored on 'Company Registered Address'
    # Looks for the first 'address1': '...' and 'countryName': '...' afterwards
    pattern = r"'Company Registered Address'.*?'address1'\s*:\s*'([^']+)'.*?'countryName'\s*:\s*'([^']+)'"
    match = re.search(pattern, xml_string, re.DOTALL)
    
    if match:
        address1 = match.group(1)
        country  = match.group(2)
        return f"{address1}, {country}"
    return None

# ---------------------------------------------------------
# 1) Read incoming data #1 as a DataFrame
# ---------------------------------------------------------
df1 = Alteryx.read("#1")  # This should be a pandas DataFrame (if configured)

# Parse 'postalAddresses' column to create a new 'Registered Address' column
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    # If the column doesn't exist, create an empty one
    df1["Registered Address"] = None

# Write updated df1 to output anchor #1
Alteryx.write(df1, 1)

# ---------------------------------------------------------
# 2) Read incoming data #2 as a DataFrame
# ---------------------------------------------------------
df2 = Alteryx.read("#2")  # This should be a pandas DataFrame (if configured)

# Parse 'postalAddresses' column
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = None

# Write updated df2 to output anchor #2
Alteryx.write(df2, 2)








from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(xml_string):
    """
    Given a large string (xml_string), find the first occurrence of
    address1, cityName, and countryName after Company Registered Address.
    Return "<address1>, <cityName>, <countryName>" or None if not found.
    """
    if not xml_string or not isinstance(xml_string, str):
        return None

    pattern = r"'Company Registered Address'.*?'address1'\s*:\s*'([^']+)'.*?'cityName'\s*:\s*'([^']+)'.*?'countryName'\s*:\s*'([^']+)'"
    match = re.search(pattern, xml_string, re.DOTALL)

    if match:
        address1 = match.group(1)
        cityName = match.group(2)
        country  = match.group(3)
        return f"{address1}, {cityName}, {country}"
    return None

# ---------------------------------------------------------
# Read incoming data #1 as a DataFrame
# ---------------------------------------------------------
df1 = Alteryx.read("#1")  # must be configured as DataFrame input
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = None

Alteryx.write(df1, 1)

# ---------------------------------------------------------
# Read incoming data #2 as a DataFrame
# ---------------------------------------------------------
df2 = Alteryx.read("#2")  # must be configured as DataFrame input
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = None

Alteryx.write(df2, 2)


from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(xml_string):
    """
    Given a large string (xml_string), find the FIRST occurrence of:
      code:'REG', then 'address1', 'postalCode', 'cityName', 'countryName'.
    Returns "<address1>, <postalCode>, <cityName>, <countryName>" or None if not found.
    """
    if not xml_string or not isinstance(xml_string, str):
        return None

    pattern = (
        r"'code'\s*:\s*'REG'"
        r".*?'address1'\s*:\s*'([^']+)'"
        r".*?'postalCode'\s*:\s*'([^']+)'"
        r".*?'cityName'\s*:\s*'([^']+)'"
        r".*?'countryName'\s*:\s*'([^']+)'"
    )
    match = re.search(pattern, xml_string, re.DOTALL)
    if match:
        address1    = match.group(1)
        postal_code = match.group(2)
        city_name   = match.group(3)
        country     = match.group(4)
        return f"{address1}, {postal_code}, {city_name}, {country}"
    return None

# ----------------------------------------------------------------
# Read from input #1 as a DataFrame
# ----------------------------------------------------------------
df1 = Alteryx.read("#1")  # Ensure Input anchor #1 is set to DataFrame
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = None

Alteryx.write(df1, 1)

# ----------------------------------------------------------------
# Read from input #2 as a DataFrame
# ----------------------------------------------------------------
df2 = Alteryx.read("#2")  # Ensure Input anchor #2 is set to DataFrame
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = None
















from ayx import Alteryx, Package
import pandas as pd
import json

def parse_postal_addresses_via_json(raw_string):
    """
    Attempts to convert a string (raw_string) into valid JSON by replacing single quotes with double quotes.
    Then checks if data["code"] == "REG" and, if so, returns:
        "<address1>, <postalCode>, <cityName>, <countryName>"
    Otherwise returns None or empty.
    
    Caveats:
      - If there's an unescaped single quote inside the text (like O'Leary), naive replacement may break parsing.
      - If fields are nested inside deeper objects, you'll need to navigate those.
    """
    if not raw_string or not isinstance(raw_string, str):
        return None
    
    # Convert single quotes -> double quotes as a naive approach
    json_str = raw_string.replace("'", '"')
    
    try:
        data = json.loads(json_str)  # parse as JSON
    except json.JSONDecodeError:
        # If we fail to parse, just return None
        return None
    
    # Now 'data' should be a dict if the parse succeeded.
    # We check if code == "REG"
    if data.get("code") == "REG":
        address1    = data.get("address1", "")
        postal_code = data.get("postalCode", "")
        city_name   = data.get("cityName", "")
        country     = data.get("countryName", "")
        
        return f"{address1}, {postal_code}, {city_name}, {country}"
    else:
        # code is not REG or doesn't exist
        return None


# ----------------------------------------------------------------
# 1) Read from input #1 as a DataFrame
# ----------------------------------------------------------------
df1 = Alteryx.read("#1")  # Must be configured as DataFrame input

# Create or fill 'Registered Address'
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses_via_json)
else:
    df1["Registered Address"] = None

# Write the modified df to output anchor #1
Alteryx.write(df1, 1)

# ----------------------------------------------------------------
# 2) Read from input #2 as a DataFrame
# ----------------------------------------------------------------
df2 = Alteryx.read("#2")  # Must be configured as DataFrame input

if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses_via_json)
else:
    df2["Registered Address"] = None

# Write the modified df to output anchor #2
Alteryx.write(df2, 2)

Alteryx.write(df2, 2)















from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses_universal(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"
    
    code_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1(.*)',
        re.DOTALL
    )
    code_match = code_pattern.search(raw_string)
    if not code_match:
        return "COULD NOT PARSE ADDRESS"
    
    substring_after_reg = code_match.group(2)
    
    def find_field(substring, field_name):
        pattern = re.compile(
            rf'[\"\']{field_name}[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(substring)
        return m.group('val') if m else None

    address1    = find_field(substring_after_reg, "address1")
    postal_code = find_field(substring_after_reg, "postalCode")
    city_name   = find_field(substring_after_reg, "cityName")
    country     = find_field(substring_after_reg, "countryName")

    all_missing = (address1 is None and 
                   postal_code is None and 
                   city_name is None and 
                   country is None)
    if all_missing:
        return "COULD NOT PARSE ADDRESS"
    
    if address1 is None:
        return "COULD NOT PARSE address1"
    if postal_code is None:
        return "COULD NOT PARSE postalCode"
    if city_name is None:
        return "COULD NOT PARSE cityName"
    if country is None:
        return "COULD NOT PARSE countryName"

    return f"{address1}, {postal_code}, {city_name}, {country}"


# Read input #1 as DataFrame
df1 = Alteryx.read("#1")  # Configure Input #1 as DataFrame
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses_universal)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# Read input #2 as DataFrame
df2 = Alteryx.read("#2")  # Configure Input #2 as DataFrame
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses_universal)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)



















from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"

    # 1) Locate code:'REG' or code:"REG"
    code_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1(.*)',
        re.DOTALL
    )
    code_match = code_pattern.search(raw_string)
    if not code_match:
        return "COULD NOT PARSE ADDRESS"

    substring_after_reg = code_match.group(2)

    # Finder for 'address1' or 'address'
    def find_address(sub):
        pattern = re.compile(
            r'[\"\'](?:address1|address)[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(sub)
        return m.group('val') if m else None

    def find_postalCode(sub):
        pattern = re.compile(
            r'[\"\']postalCode[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(sub)
        return m.group('val') if m else None

    def find_cityName(sub):
        pattern = re.compile(
            r'[\"\']cityName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(sub)
        return m.group('val') if m else None

    def find_countryName(sub):
        pattern = re.compile(
            r'[\"\']countryName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(sub)
        return m.group('val') if m else None

    address     = find_address(substring_after_reg)
    postal_code = find_postalCode(substring_after_reg)
    city_name   = find_cityName(substring_after_reg)
    country     = find_countryName(substring_after_reg)

    # Evaluate missing fields
    all_missing = (address is None 
                   and postal_code is None 
                   and city_name is None 
                   and country is None)
    if all_missing:
        return "COULD NOT PARSE ADDRESS"

    # If only one or some are missing
    if address is None:
        return "COULD NOT PARSE address1/address"
    if postal_code is None:
        return "COULD NOT PARSE postalCode"
    if city_name is None:
        return "COULD NOT PARSE cityName"
    if country is None:
        return "COULD NOT PARSE countryName"

    # All fields found
    return f"{address}, {postal_code}, {city_name}, {country}"

# ----------------------------------------------------------
# Read from input #1 as a DataFrame
# ----------------------------------------------------------
df1 = Alteryx.read("#1")  # Must be set to DataFrame in the config

if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# ----------------------------------------------------------
# Read from input #2 as a DataFrame
# ----------------------------------------------------------
df2 = Alteryx.read("#2")  # Must be set to DataFrame as well

if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)
















from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"

    # --- Find substring from code:'REG' to next 'code': or end of string ---
    segment_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1'
        r'(.*?)'
        r'(?=[\"\']code[\"\']|$)',
        re.DOTALL
    )
    m = segment_pattern.search(raw_string)
    if not m:
        return "COULD NOT PARSE ADDRESS"

    segment_for_reg = m.group(2)

    def find_address(sub):
        pat = re.compile(
            r'[\"\'](?:address1|address)[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        match = pat.search(sub)
        return match.group('val') if match else None

    def find_postalCode(sub):
        pat = re.compile(
            r'[\"\']postalCode[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        match = pat.search(sub)
        return match.group('val') if match else None

    def find_cityName(sub):
        pat = re.compile(
            r'[\"\']cityName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        match = pat.search(sub)
        return match.group('val') if match else None

    def find_countryName(sub):
        pat = re.compile(
            r'[\"\']countryName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        match = pat.search(sub)
        return match.group('val') if match else None

    address_val = find_address(segment_for_reg)
    postal_val  = find_postalCode(segment_for_reg)
    city_val    = find_cityName(segment_for_reg)
    country_val = find_countryName(segment_for_reg)

    # Check missing
    all_missing = (address_val is None 
                   and postal_val is None
                   and city_val is None
                   and country_val is None)
    if all_missing:
        return "COULD NOT PARSE ADDRESS"

    if address_val is None:
        return "COULD NOT PARSE address1/address"
    if postal_val is None:
        return "COULD NOT PARSE postalCode"
    if city_val is None:
        return "COULD NOT PARSE cityName"
    if country_val is None:
        return "COULD NOT PARSE countryName"

    return f"{address_val}, {postal_val}, {city_val}, {country_val}"


# --------------------------------------------------------
# Process Input #1
# --------------------------------------------------------
df1 = Alteryx.read("#1")  # DataFrame input
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# --------------------------------------------------------
# Process Input #2
# --------------------------------------------------------
df2 = Alteryx.read("#2")  # DataFrame input
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)























from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"
    
    segment_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1'
        r'(.*?)'
        r'(?=[\"\']code[\"\']|$)',
        re.DOTALL
    )
    match = segment_pattern.search(raw_string)
    if not match:
        return "COULD NOT PARSE ADDRESS"

    segment_for_reg = match.group(2)

    def find_address(sub):
        pat = re.compile(
            r'[\"\'](?:address1|address)[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pat.search(sub)
        return m.group('val') if m else None

    def find_postalCode(sub):
        pat = re.compile(
            r'[\"\']postalCode[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pat.search(sub)
        return m.group('val') if m else None

    def find_cityName(sub):
        pat = re.compile(
            r'[\"\']cityName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pat.search(sub)
        return m.group('val') if m else None

    def find_countryName(sub):
        pat = re.compile(
            r'[\"\']countryName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pat.search(sub)
        return m.group('val') if m else None

    address_val = find_address(segment_for_reg)
    postal_val  = find_postalCode(segment_for_reg)
    city_val    = find_cityName(segment_for_reg)
    country_val = find_countryName(segment_for_reg)

    # If all four are missing
    if (address_val is None and
        postal_val is None and
        city_val is None and
        country_val is None):
        return "COULD NOT PARSE ADDRESS"

    # Otherwise, placeholders for missing fields
    final_address  = address_val  if address_val  is not None else "address:BLANK"
    final_postal   = postal_val  if postal_val   is not None else "postalCode:BLANK"
    final_city     = city_val    if city_val     is not None else "cityName:BLANK"
    final_country  = country_val if country_val  is not None else "countryName:BLANK"

    return f"{final_address}, {final_postal}, {final_city}, {final_country}"


# ---------------------------------------------
# 1) Process Input #1
# ---------------------------------------------
df1 = Alteryx.read("#1")  # DataFrame input
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# ---------------------------------------------
# 2) Process Input #2
# ---------------------------------------------
df2 = Alteryx.read("#2")  # DataFrame input
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)

















from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"

    # 1) Extract code:'REG' block
    segment_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1'
        r'(.*?)'
        r'(?=[\"\']code[\"\']|$)',
        re.DOTALL
    )
    match = segment_pattern.search(raw_string)
    if not match:
        return "COULD NOT PARSE ADDRESS"
    segment_for_reg = match.group(2)

    # 2) Find *all* addressN fields
    address_pattern = re.compile(
        r'[\"\'](address(?P<num>\d+))[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\3)',
        re.DOTALL
    )
    addresses = []
    for addr_match in address_pattern.finditer(segment_for_reg):
        num_str = addr_match.group('num')
        val     = addr_match.group('val')
        if val:  # skip empty
            addresses.append((int(num_str), val))
    addresses.sort(key=lambda x: x[0])
    address_values = [item[1] for item in addresses]
    if not address_values:
        address_values = ["address:BLANK"]  # no addresses or all empty

    # 3) Single-field lookups for postalCode, cityName, countryName
    def find_single_field(sub, field_name):
        pat = re.compile(
            rf'[\"\']{field_name}[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pat.search(sub)
        return m.group('val') if m else None

    postal_val  = find_single_field(segment_for_reg, "postalCode")
    city_val    = find_single_field(segment_for_reg, "cityName")
    country_val = find_single_field(segment_for_reg, "countryName")

    def finalize_field(value, placeholder):
        return value if value else f"{placeholder}:BLANK"

    postal_out  = finalize_field(postal_val,  "postalCode")
    city_out    = finalize_field(city_val,    "cityName")
    country_out = finalize_field(country_val, "countryName")

    # 4) If truly nothing => "COULD NOT PARSE ADDRESS"
    if (address_values == ["address:BLANK"] and
        postal_out  == "postalCode:BLANK"   and
        city_out    == "cityName:BLANK"     and
        country_out == "countryName:BLANK"):
        return "COULD NOT PARSE ADDRESS"

    # 5) Build final string
    combined = address_values + [postal_out, city_out, country_out]
    return ", ".join(combined)


# ---------------------------------------------------------------------
# Process Input #1
# ---------------------------------------------------------------------
df1 = Alteryx.read("#1")  # set to DataFrame in the Python tool config
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# ---------------------------------------------------------------------
# Process Input #2
# ---------------------------------------------------------------------
df2 = Alteryx.read("#2")  # set to DataFrame
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)











from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"

    # --- Identify code:'REG' block ---
    segment_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1'
        r'(.*?)'
        r'(?=[\"\']code[\"\']|$)',
        re.DOTALL
    )
    match = segment_pattern.search(raw_string)
    if not match:
        return "COULD NOT PARSE ADDRESS"

    segment_for_reg = match.group(2)

    # --- Find all addressN fields (e.g., address1, address2, etc.) ---
    address_pattern = re.compile(
        r'[\"\'](address(?P<num>\d+))[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\3)',
        re.DOTALL
    )
    addresses = []
    for addr_match in address_pattern.finditer(segment_for_reg):
        num_str = addr_match.group('num')
        val     = addr_match.group('val')
        
        # Skip if empty or 3-5 dots only
        if not val or re.match(r'^\.{3,5}$', val):
            continue
        
        addresses.append((int(num_str), val))

    addresses.sort(key=lambda x: x[0])
    address_values = [item[1] for item in addresses]

    # If no addresses remain => single placeholder
    if not address_values:
        address_values = ["address:BLANK"]

    # --- Single-field lookups for postalCode, cityName, countryName ---
    def find_single_field(sub, field_name):
        pat = re.compile(
            rf'[\"\']{field_name}[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pat.search(sub)
        if not m:
            return None
        return m.group('val')

    postal_val  = find_single_field(segment_for_reg, "postalCode")
    city_val    = find_single_field(segment_for_reg, "cityName")
    country_val = find_single_field(segment_for_reg, "countryName")

    def finalize_field(value, placeholder):
        if not value:
            return f"{placeholder}:BLANK"
        return value

    postal_out  = finalize_field(postal_val,  "postalCode")
    city_out    = finalize_field(city_val,    "cityName")
    country_out = finalize_field(country_val, "countryName")

    # --- If everything is placeholders => "COULD NOT PARSE ADDRESS" ---
    if (address_values == ["address:BLANK"] and
        postal_out  == "postalCode:BLANK"   and
        city_out    == "cityName:BLANK"     and
        country_out == "countryName:BLANK"):
        return "COULD NOT PARSE ADDRESS"

    # --- Build final string ---
    combined = address_values + [postal_out, city_out, country_out]
    return ", ".join(combined)

# -----------------------------------------------------------
# Process Input #1
# -----------------------------------------------------------
df1 = Alteryx.read("#1")  # DataFrame input
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# -----------------------------------------------------------
# Process Input #2
# -----------------------------------------------------------
df2 = Alteryx.read("#2")  # DataFrame input
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)

















from ayx import Alteryx, Package
import pandas as pd
import re

def extract_code(xml_str):
    """
    Returns the text between <code> and </code>, or None if not found.
    Example: <code>REG</code> -> 'REG'
    """
    match = re.search(r'<code>(.*?)</code>', xml_str, flags=re.DOTALL)
    if match:
        return match.group(1).strip()
    return None

def extract_all_addresses(xml_str):
    """
    Finds all <addressN>...</addressN> pairs (e.g. <address1>Some St</address1>).
    Returns a list of address strings in ascending numeric order of N.
      For <address1>, <address10>, we parse out '1' and '10' as integers,
      then sort so address1 comes before address10.
    If none found, returns an empty list.
    """
    # Regex captures <address12>stuff</address12>, with '12' as group(1) and text as group(2)
    pattern = re.compile(r'<address(\d+)>(.*?)</address\1>', flags=re.DOTALL)
    matches = pattern.findall(xml_str)  # list of tuples: [(num_str, text), (num_str, text), ...]
    
    address_list = []
    for num_str, address_text in matches:
        address_text = address_text.strip()
        addr_num = int(num_str)  # convert '1' => 1, etc.
        address_list.append((addr_num, address_text))
    
    # Sort by the numeric part so address1 < address2 < address10
    address_list.sort(key=lambda x: x[0])
    
    # Return the text in ascending order
    return [item[1] for item in address_list]

def extract_city_name(xml_str):
    """
    Extract <cityName>...</cityName> content. Returns None if not found.
    """
    match = re.search(r'<cityName>(.*?)</cityName>', xml_str, flags=re.DOTALL)
    if match:
        return match.group(1).strip()
    return None

def extract_postal_code(xml_str):
    """
    Extract <postalCode>...</postalCode> content. Returns None if not found.
    """
    match = re.search(r'<postalCode>(.*?)</postalCode>', xml_str, flags=re.DOTALL)
    if match:
        return match.group(1).strip()
    return None

def extract_country_name(xml_str):
    """
    Extract <countryName>...</countryName> content. Returns None if not found.
    """
    match = re.search(r'<countryName>(.*?)</countryName>', xml_str, flags=re.DOTALL)
    if match:
        return match.group(1).strip()
    return None

def parse_postal_addresses(xml_str):
    """
    Main orchestrator:
    1) Check if <code>REG</code>. If not, return "COULD NOT PARSE ADDRESS".
    2) Extract all <addressN> in ascending numeric order.
    3) Extract <cityName>, <postalCode>, <countryName>.
    4) Combine in the order: [all addresses], cityName, postalCode, countryName.
    5) If nothing found, return "COULD NOT PARSE ADDRESS", else join them by comma.
    """
    if not xml_str or not isinstance(xml_str, str):
        return "COULD NOT PARSE ADDRESS"

    # 1) Check <code>REG</code>
    code_val = extract_code(xml_str)
    if code_val is None or code_val != "REG":
        return "COULD NOT PARSE ADDRESS"

    # 2) Collect all addresses
    addresses = extract_all_addresses(xml_str)
    # addresses is a list like ["123 Main", "Suite A"] or []

    # 3) Single fields
    city_val    = extract_city_name(xml_str)
    postal_val  = extract_postal_code(xml_str)
    country_val = extract_country_name(xml_str)

    # 4) Combine in new order: addresses..., cityName, postalCode, countryName
    final_parts = []

    # addresses
    final_parts.extend(addr for addr in addresses if addr)

    # cityName
    if city_val:
        final_parts.append(city_val)

    # postalCode
    if postal_val:
        final_parts.append(postal_val)

    # countryName
    if country_val:
        final_parts.append(country_val)

    # If final_parts is empty => no addresses & no city/postal/country => cannot parse
    if not final_parts:
        return "COULD NOT PARSE ADDRESS"

    return ", ".join(final_parts)


# -----------------------------------------------------------------
# Alteryx: Read DataFrame from Input #1, parse, write to Output #1
# -----------------------------------------------------------------
df1 = Alteryx.read("#1")  # Ensure Input #1 is configured as "DataFrame"
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# -----------------------------------------------------------------
# Alteryx: Read DataFrame from Input #2, parse, write to Output #2
# -----------------------------------------------------------------
df2 = Alteryx.read("#2")  # Ensure Input #2 is also "DataFrame"
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)













from ayx import Alteryx, Package
import pandas as pd
import re

def extract_reg_postal_address_block(xml_str):
    if not xml_str or not isinstance(xml_str, str):
        return None
    pattern = re.compile(r"<postalAddress>(.*?)</postalAddress>", re.DOTALL)
    blocks = pattern.findall(xml_str)
    for block_content in blocks:
        if re.search(r"<code>\s*REG\s*</code>", block_content, re.DOTALL):
            return block_content.strip()
    return None

def extract_all_addresses(xml_str):
    pattern = re.compile(r"<address(\d+)>(.*?)</address\1>", re.DOTALL)
    matches = pattern.findall(xml_str)
    address_list = []
    for num_str, address_text in matches:
        address_text = address_text.strip()
        addr_num = int(num_str)
        address_list.append((addr_num, address_text))
    address_list.sort(key=lambda x: x[0])
    return [txt for (_, txt) in address_list if txt]

def extract_city_name(xml_str):
    match = re.search(r"<cityName>(.*?)</cityName>", xml_str, re.DOTALL)
    return match.group(1).strip() if match else None

def extract_postal_code(xml_str):
    match = re.search(r"<postalCode>(.*?)</postalCode>", xml_str, re.DOTALL)
    return match.group(1).strip() if match else None

def extract_country_name(xml_str):
    match = re.search(r"<countryName>(.*?)</countryName>", xml_str, re.DOTALL)
    return match.group(1).strip() if match else None

def parse_postal_addresses(xml_str):
    reg_block = extract_reg_postal_address_block(xml_str)
    if not reg_block:
        return "COULD NOT PARSE ADDRESS"
    addresses = extract_all_addresses(reg_block)
    city_val  = extract_city_name(reg_block)
    post_val  = extract_postal_code(reg_block)
    ctry_val  = extract_country_name(reg_block)

    final_parts = []
    final_parts.extend(addresses)  # addresses first
    if city_val:
        final_parts.append(city_val)
    if post_val:
        final_parts.append(post_val)
    if ctry_val:
        final_parts.append(ctry_val)

    if not final_parts:
        return "COULD NOT PARSE ADDRESS"
    return ", ".join(final_parts)

# --------------------------------------
# Process Input #1
# --------------------------------------
df1 = Alteryx.read("#1")
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# --------------------------------------
# Process Input #2
# --------------------------------------
df2 = Alteryx.read("#2")
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)


















from ayx import Alteryx, Package
import pandas as pd
import re

def clean_text(value):
    """
    Returns:
      - None if `value` is empty or contains only periods (after stripping).
      - Otherwise, the stripped text.
    """
    if not value or not isinstance(value, str):
        return None
    val = value.strip()
    # If empty or only periods -> None
    if not val:
        return None
    if re.match(r'^\.+$', val):
        return None
    return val  # valid text

def extract_reg_postal_address_block(xml_str):
    if not xml_str or not isinstance(xml_str, str):
        return None
    # Find all <postalAddress>...</postalAddress> blocks
    pattern = re.compile(r"<postalAddress>(.*?)</postalAddress>", re.DOTALL)
    blocks = pattern.findall(xml_str)
    for block_content in blocks:
        # Check if <code>REG</code> is inside
        if re.search(r"<code>\s*REG\s*</code>", block_content, re.DOTALL):
            return block_content.strip()
    return None

def extract_all_addresses(xml_str):
    """
    Finds <addressN>...</addressN> pairs and returns a list of
    cleaned address strings in ascending numeric order.
    Skips any that are empty or all periods.
    """
    pattern = re.compile(r"<address(\d+)>(.*?)</address\1>", re.DOTALL)
    matches = pattern.findall(xml_str)

    addresses = []
    for num_str, address_text in matches:
        cleaned = clean_text(address_text)
        if cleaned:
            addresses.append((int(num_str), cleaned))
    addresses.sort(key=lambda x: x[0])
    return [txt for (_, txt) in addresses]

def extract_city_name(xml_str):
    match = re.search(r"<cityName>(.*?)</cityName>", xml_str, re.DOTALL)
    val = match.group(1) if match else None
    return clean_text(val)

def extract_postal_code(xml_str):
    match = re.search(r"<postalCode>(.*?)</postalCode>", xml_str, re.DOTALL)
    val = match.group(1) if match else None
    return clean_text(val)

def extract_country_name(xml_str):
    match = re.search(r"<countryName>(.*?)</countryName>", xml_str, re.DOTALL)
    val = match.group(1) if match else None
    return clean_text(val)

def parse_postal_addresses(xml_str):
    """
    1) Locate first <postalAddress> block containing <code>REG</code>.
    2) Extract <address#>, <cityName>, <postalCode>, <countryName>.
       - Filter out empty or '...' style values.
    3) Return them in order: addresses..., cityName, postalCode, countryName.
    4) If none found => "COULD NOT PARSE ADDRESS".
    """
    reg_block = extract_reg_postal_address_block(xml_str)
    if not reg_block:
        return "COULD NOT PARSE ADDRESS"

    addresses = extract_all_addresses(reg_block)
    city_val  = extract_city_name(reg_block)
    post_val  = extract_postal_code(reg_block)
    ctry_val  = extract_country_name(reg_block)

    final_parts = []
    # addresses first
    final_parts.extend(addresses)
    # cityName
    if city_val:
        final_parts.append(city_val)
    # postalCode
    if post_val:
        final_parts.append(post_val)
    # countryName
    if ctry_val:
        final_parts.append(ctry_val)

    if not final_parts:
        return "COULD NOT PARSE ADDRESS"
    return ", ".join(final_parts)

# --------------------------------------------------------
# Alteryx: Read from Input #1 (DataFrame), parse, write
# --------------------------------------------------------
df1 = Alteryx.read("#1")  # must be configured as DataFrame
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# --------------------------------------------------------
# Alteryx: Read from Input #2 (DataFrame), parse, write
# --------------------------------------------------------
df2 = Alteryx.read("#2")  # must be DataFrame
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)

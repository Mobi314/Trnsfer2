from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(xml_string):
    """
    Given a string (xml_string), find the first occurrence of 'address1' and 'countryName'
    AFTER 'Company Registered Address'. Return '<address1>, <countryName>' or None if not found.
    """
    if not xml_string or not isinstance(xml_string, str):
        return None
    
    # Regex anchored on 'Company Registered Address'
    # Looks for the first 'address1': '...' and 'countryName': '...' afterwards
    pattern = r"'Company Registered Address'.*?'address1'\s*:\s*'([^']+)'.*?'countryName'\s*:\s*'([^']+)'"
    match = re.search(pattern, xml_string, re.DOTALL)
    
    if match:
        address1 = match.group(1)
        country  = match.group(2)
        return f"{address1}, {country}"
    return None

# ---------------------------------------------------------
# 1) Read incoming data #1 as a DataFrame
# ---------------------------------------------------------
df1 = Alteryx.read("#1")  # This should be a pandas DataFrame (if configured)

# Parse 'postalAddresses' column to create a new 'Registered Address' column
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    # If the column doesn't exist, create an empty one
    df1["Registered Address"] = None

# Write updated df1 to output anchor #1
Alteryx.write(df1, 1)

# ---------------------------------------------------------
# 2) Read incoming data #2 as a DataFrame
# ---------------------------------------------------------
df2 = Alteryx.read("#2")  # This should be a pandas DataFrame (if configured)

# Parse 'postalAddresses' column
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = None

# Write updated df2 to output anchor #2
Alteryx.write(df2, 2)








from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(xml_string):
    """
    Given a large string (xml_string), find the first occurrence of
    address1, cityName, and countryName after Company Registered Address.
    Return "<address1>, <cityName>, <countryName>" or None if not found.
    """
    if not xml_string or not isinstance(xml_string, str):
        return None

    pattern = r"'Company Registered Address'.*?'address1'\s*:\s*'([^']+)'.*?'cityName'\s*:\s*'([^']+)'.*?'countryName'\s*:\s*'([^']+)'"
    match = re.search(pattern, xml_string, re.DOTALL)

    if match:
        address1 = match.group(1)
        cityName = match.group(2)
        country  = match.group(3)
        return f"{address1}, {cityName}, {country}"
    return None

# ---------------------------------------------------------
# Read incoming data #1 as a DataFrame
# ---------------------------------------------------------
df1 = Alteryx.read("#1")  # must be configured as DataFrame input
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = None

Alteryx.write(df1, 1)

# ---------------------------------------------------------
# Read incoming data #2 as a DataFrame
# ---------------------------------------------------------
df2 = Alteryx.read("#2")  # must be configured as DataFrame input
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = None

Alteryx.write(df2, 2)


from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(xml_string):
    """
    Given a large string (xml_string), find the FIRST occurrence of:
      code:'REG', then 'address1', 'postalCode', 'cityName', 'countryName'.
    Returns "<address1>, <postalCode>, <cityName>, <countryName>" or None if not found.
    """
    if not xml_string or not isinstance(xml_string, str):
        return None

    pattern = (
        r"'code'\s*:\s*'REG'"
        r".*?'address1'\s*:\s*'([^']+)'"
        r".*?'postalCode'\s*:\s*'([^']+)'"
        r".*?'cityName'\s*:\s*'([^']+)'"
        r".*?'countryName'\s*:\s*'([^']+)'"
    )
    match = re.search(pattern, xml_string, re.DOTALL)
    if match:
        address1    = match.group(1)
        postal_code = match.group(2)
        city_name   = match.group(3)
        country     = match.group(4)
        return f"{address1}, {postal_code}, {city_name}, {country}"
    return None

# ----------------------------------------------------------------
# Read from input #1 as a DataFrame
# ----------------------------------------------------------------
df1 = Alteryx.read("#1")  # Ensure Input anchor #1 is set to DataFrame
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = None

Alteryx.write(df1, 1)

# ----------------------------------------------------------------
# Read from input #2 as a DataFrame
# ----------------------------------------------------------------
df2 = Alteryx.read("#2")  # Ensure Input anchor #2 is set to DataFrame
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = None
















from ayx import Alteryx, Package
import pandas as pd
import json

def parse_postal_addresses_via_json(raw_string):
    """
    Attempts to convert a string (raw_string) into valid JSON by replacing single quotes with double quotes.
    Then checks if data["code"] == "REG" and, if so, returns:
        "<address1>, <postalCode>, <cityName>, <countryName>"
    Otherwise returns None or empty.
    
    Caveats:
      - If there's an unescaped single quote inside the text (like O'Leary), naive replacement may break parsing.
      - If fields are nested inside deeper objects, you'll need to navigate those.
    """
    if not raw_string or not isinstance(raw_string, str):
        return None
    
    # Convert single quotes -> double quotes as a naive approach
    json_str = raw_string.replace("'", '"')
    
    try:
        data = json.loads(json_str)  # parse as JSON
    except json.JSONDecodeError:
        # If we fail to parse, just return None
        return None
    
    # Now 'data' should be a dict if the parse succeeded.
    # We check if code == "REG"
    if data.get("code") == "REG":
        address1    = data.get("address1", "")
        postal_code = data.get("postalCode", "")
        city_name   = data.get("cityName", "")
        country     = data.get("countryName", "")
        
        return f"{address1}, {postal_code}, {city_name}, {country}"
    else:
        # code is not REG or doesn't exist
        return None


# ----------------------------------------------------------------
# 1) Read from input #1 as a DataFrame
# ----------------------------------------------------------------
df1 = Alteryx.read("#1")  # Must be configured as DataFrame input

# Create or fill 'Registered Address'
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses_via_json)
else:
    df1["Registered Address"] = None

# Write the modified df to output anchor #1
Alteryx.write(df1, 1)

# ----------------------------------------------------------------
# 2) Read from input #2 as a DataFrame
# ----------------------------------------------------------------
df2 = Alteryx.read("#2")  # Must be configured as DataFrame input

if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses_via_json)
else:
    df2["Registered Address"] = None

# Write the modified df to output anchor #2
Alteryx.write(df2, 2)

Alteryx.write(df2, 2)















from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses_universal(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"
    
    code_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1(.*)',
        re.DOTALL
    )
    code_match = code_pattern.search(raw_string)
    if not code_match:
        return "COULD NOT PARSE ADDRESS"
    
    substring_after_reg = code_match.group(2)
    
    def find_field(substring, field_name):
        pattern = re.compile(
            rf'[\"\']{field_name}[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(substring)
        return m.group('val') if m else None

    address1    = find_field(substring_after_reg, "address1")
    postal_code = find_field(substring_after_reg, "postalCode")
    city_name   = find_field(substring_after_reg, "cityName")
    country     = find_field(substring_after_reg, "countryName")

    all_missing = (address1 is None and 
                   postal_code is None and 
                   city_name is None and 
                   country is None)
    if all_missing:
        return "COULD NOT PARSE ADDRESS"
    
    if address1 is None:
        return "COULD NOT PARSE address1"
    if postal_code is None:
        return "COULD NOT PARSE postalCode"
    if city_name is None:
        return "COULD NOT PARSE cityName"
    if country is None:
        return "COULD NOT PARSE countryName"

    return f"{address1}, {postal_code}, {city_name}, {country}"


# Read input #1 as DataFrame
df1 = Alteryx.read("#1")  # Configure Input #1 as DataFrame
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses_universal)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# Read input #2 as DataFrame
df2 = Alteryx.read("#2")  # Configure Input #2 as DataFrame
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses_universal)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)



















from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"

    # 1) Locate code:'REG' or code:"REG"
    code_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1(.*)',
        re.DOTALL
    )
    code_match = code_pattern.search(raw_string)
    if not code_match:
        return "COULD NOT PARSE ADDRESS"

    substring_after_reg = code_match.group(2)

    # Finder for 'address1' or 'address'
    def find_address(sub):
        pattern = re.compile(
            r'[\"\'](?:address1|address)[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(sub)
        return m.group('val') if m else None

    def find_postalCode(sub):
        pattern = re.compile(
            r'[\"\']postalCode[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(sub)
        return m.group('val') if m else None

    def find_cityName(sub):
        pattern = re.compile(
            r'[\"\']cityName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(sub)
        return m.group('val') if m else None

    def find_countryName(sub):
        pattern = re.compile(
            r'[\"\']countryName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        m = pattern.search(sub)
        return m.group('val') if m else None

    address     = find_address(substring_after_reg)
    postal_code = find_postalCode(substring_after_reg)
    city_name   = find_cityName(substring_after_reg)
    country     = find_countryName(substring_after_reg)

    # Evaluate missing fields
    all_missing = (address is None 
                   and postal_code is None 
                   and city_name is None 
                   and country is None)
    if all_missing:
        return "COULD NOT PARSE ADDRESS"

    # If only one or some are missing
    if address is None:
        return "COULD NOT PARSE address1/address"
    if postal_code is None:
        return "COULD NOT PARSE postalCode"
    if city_name is None:
        return "COULD NOT PARSE cityName"
    if country is None:
        return "COULD NOT PARSE countryName"

    # All fields found
    return f"{address}, {postal_code}, {city_name}, {country}"

# ----------------------------------------------------------
# Read from input #1 as a DataFrame
# ----------------------------------------------------------
df1 = Alteryx.read("#1")  # Must be set to DataFrame in the config

if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# ----------------------------------------------------------
# Read from input #2 as a DataFrame
# ----------------------------------------------------------
df2 = Alteryx.read("#2")  # Must be set to DataFrame as well

if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)
















from ayx import Alteryx, Package
import pandas as pd
import re

def parse_postal_addresses(raw_string):
    if not raw_string or not isinstance(raw_string, str):
        return "COULD NOT PARSE ADDRESS"

    # --- Find substring from code:'REG' to next 'code': or end of string ---
    segment_pattern = re.compile(
        r'[\"\']code[\"\']\s*:\s*([\"\'])REG\1'
        r'(.*?)'
        r'(?=[\"\']code[\"\']|$)',
        re.DOTALL
    )
    m = segment_pattern.search(raw_string)
    if not m:
        return "COULD NOT PARSE ADDRESS"

    segment_for_reg = m.group(2)

    def find_address(sub):
        pat = re.compile(
            r'[\"\'](?:address1|address)[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        match = pat.search(sub)
        return match.group('val') if match else None

    def find_postalCode(sub):
        pat = re.compile(
            r'[\"\']postalCode[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        match = pat.search(sub)
        return match.group('val') if match else None

    def find_cityName(sub):
        pat = re.compile(
            r'[\"\']cityName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        match = pat.search(sub)
        return match.group('val') if match else None

    def find_countryName(sub):
        pat = re.compile(
            r'[\"\']countryName[\"\']\s*:\s*([\"\'])(?P<val>.*?)(\1)',
            re.DOTALL
        )
        match = pat.search(sub)
        return match.group('val') if match else None

    address_val = find_address(segment_for_reg)
    postal_val  = find_postalCode(segment_for_reg)
    city_val    = find_cityName(segment_for_reg)
    country_val = find_countryName(segment_for_reg)

    # Check missing
    all_missing = (address_val is None 
                   and postal_val is None
                   and city_val is None
                   and country_val is None)
    if all_missing:
        return "COULD NOT PARSE ADDRESS"

    if address_val is None:
        return "COULD NOT PARSE address1/address"
    if postal_val is None:
        return "COULD NOT PARSE postalCode"
    if city_val is None:
        return "COULD NOT PARSE cityName"
    if country_val is None:
        return "COULD NOT PARSE countryName"

    return f"{address_val}, {postal_val}, {city_val}, {country_val}"


# --------------------------------------------------------
# Process Input #1
# --------------------------------------------------------
df1 = Alteryx.read("#1")  # DataFrame input
if "postalAddresses" in df1.columns:
    df1["Registered Address"] = df1["postalAddresses"].apply(parse_postal_addresses)
else:
    df1["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df1, 1)

# --------------------------------------------------------
# Process Input #2
# --------------------------------------------------------
df2 = Alteryx.read("#2")  # DataFrame input
if "postalAddresses" in df2.columns:
    df2["Registered Address"] = df2["postalAddresses"].apply(parse_postal_addresses)
else:
    df2["Registered Address"] = "COULD NOT PARSE ADDRESS"

Alteryx.write(df2, 2)

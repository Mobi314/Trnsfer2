import pandas as pd
import xml.etree.ElementTree as ET

# Placeholder for allowed classifications under domain 'CLMFO'
allowed_clmfo_classifications = [
    # Add your allowed classification strings here
    "EXAMPLE1",
    "EXAMPLE2",
    "EXAMPLE3"
]

# List to collect parsed rows
parsed_rows = []

# Final output fields (parsed + original fields, excluding 'orgBusinessClasses')
parsed_fields = ['domain', 'classification', 'classificationDesc', 'parentClassificationCode', 'parentClassification']

# Function to safely extract a tag using regex
def extract_tag_value(text, tag):
    pattern = f'<{tag}>(.*?)</{tag}>'
    match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
    return match.group(1).strip() if match else ""

# Function to parse using regex
def parse_org_business_classes():
    for idx, row in df_CCP.iterrows():
        xml_content = row['orgBusinessClasses']

        if not xml_content or pd.isna(xml_content):
            continue  # Skip empty or NaN

        # Find all businessClass sections
        business_classes = re.findall(r'<businessClass>(.*?)</businessClass>', xml_content, re.DOTALL | re.IGNORECASE)

        for bc in business_classes:
            domain = extract_tag_value(bc, "domain")
            classification = extract_tag_value(bc, "classification")
            classification_desc = extract_tag_value(bc, "classificationDesc")
            parent_classification_code = extract_tag_value(bc, "parentClassificationCode")
            parent_classification = extract_tag_value(bc, "parentClassification")

            # Apply domain/classification criteria
            if domain in ["CLMPR", "KYDNT", "ACCA"]:
                pass
            elif domain == "CLMFO" and classification in allowed_clmfo_classifications:
                pass
            else:
                continue  # Skip if not matching

            # Copy original row excluding 'orgBusinessClasses'
            base_record = row.drop(labels=['orgBusinessClasses']).to_dict()

            # Add parsed fields
            base_record.update({
                'domain': domain,
                'classification': classification,
                'classificationDesc': classification_desc,
                'parentClassificationCode': parent_classification_code,
                'parentClassification': parent_classification
            })

            # Store
            parsed_rows.append(base_record)

# Execute parsing
parse_org_business_classes()

# List of final columns = all original columns (except 'orgBusinessClasses') + parsed fields
original_columns = [col for col in df_CCP.columns if col != 'orgBusinessClasses']
final_columns = original_columns + parsed_fields

# Create parsed DataFrame, ensuring columns exist even if empty
df_CCP_Parsed = pd.DataFrame(parsed_rows, columns=final_columns)

# Force all columns to string type
for col in df_CCP_Parsed.columns:
    df_CCP_Parsed[col] = df_CCP_Parsed[col].astype(str)

# Output
Alteryx.write(df_CCP_Parsed, 1)
















import pandas as pd
import re
from ayx import Alteryx

# Placeholder for allowed classifications under domain 'CLMFO'
allowed_clmfo_classifications = [
    "EXAMPLE1",
    "EXAMPLE2",
    "EXAMPLE3"
]

parsed_rows = []

# Fields to extract from orgBusinessClasses
parsed_fields = ['domain', 'classification', 'classificationDesc', 'parentClassificationCode', 'parentClassification', 'Review Date']

# Extract specific tag value from a text block
def extract_tag_value(text, tag):
    pattern = f'<{tag}>(.*?)</{tag}>'
    match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
    return match.group(1).strip() if match else ""

# Extract "Review Date" from orgStatus
def extract_review_date(org_status_text):
    if not org_status_text or pd.isna(org_status_text):
        return ""
    
    # Find all <GenericAttribute> blocks
    blocks = re.findall(r'<GenericAttribute>(.*?)</GenericAttribute>', org_status_text, re.DOTALL | re.IGNORECASE)
    
    for block in blocks:
        description = extract_tag_value(block, "description")
        if "Rolling Review Date" in description:
            return extract_tag_value(block, "date")
    
    return ""

# Main parsing logic
def parse_org_business_classes():
    for idx, row in df_CCP.iterrows():
        xml_content = row['orgBusinessClasses']
        org_status_content = row.get('orgStatus', "")

        if not xml_content or pd.isna(xml_content):
            continue

        business_classes = re.findall(r'<businessClass>(.*?)</businessClass>', xml_content, re.DOTALL | re.IGNORECASE)

        for bc in business_classes:
            domain = extract_tag_value(bc, "domain")
            classification = extract_tag_value(bc, "classification")
            classification_desc = extract_tag_value(bc, "classificationDesc")
            parent_classification_code = extract_tag_value(bc, "parentClassificationCode")
            parent_classification = extract_tag_value(bc, "parentClassification")

            if domain in ["CLMPR", "KYDNT", "ACCA"]:
                pass
            elif domain == "CLMFO" and classification in allowed_clmfo_classifications:
                pass
            else:
                continue

            # Get original data except XML fields
            base_record = row.drop(labels=['orgBusinessClasses', 'orgStatus']).to_dict()

            # Add parsed fields
            base_record.update({
                'domain': domain,
                'classification': classification,
                'classificationDesc': classification_desc,
                'parentClassificationCode': parent_classification_code,
                'parentClassification': parent_classification,
                'Review Date': extract_review_date(org_status_content)
            })

            parsed_rows.append(base_record)

# Run it
parse_org_business_classes()

# Define final output columns
original_columns = [col for col in df_CCP.columns if col not in ['orgBusinessClasses', 'orgStatus']]
final_columns = original_columns + parsed_fields

# Build output DataFrame
df_CCP_Parsed = pd.DataFrame(parsed_rows, columns=final_columns)

# Force all fields to string type
for col in df_CCP_Parsed.columns:
    df_CCP_Parsed[col] = df_CCP_Parsed[col].astype(str)

# Write to Alteryx
Alteryx.write(df_CCP_Parsed, 1)








import pandas as pd
import re
from ayx import Alteryx

# Placeholder for allowed classifications under domain 'CLMFO'
allowed_clmfo_classifications = [
    "EXAMPLE1",
    "EXAMPLE2",
    "EXAMPLE3"
]

parsed_rows = []

# Fields to extract from orgBusinessClasses
parsed_fields = ['domain', 'classification', 'classificationDesc', 'parentClassificationCode', 'parentClassification', 'Review Date']

# Extract specific tag value from a text block
def extract_tag_value(text, tag):
    pattern = f'<{tag}>(.*?)</{tag}>'
    match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
    return match.group(1).strip() if match else ""

# Extract "Review Date" from orgStatus
def extract_review_date(org_status_text):
    if not org_status_text or pd.isna(org_status_text):
        return ""
    
    # Find all <GenericAttribute> blocks
    blocks = re.findall(r'<GenericAttribute>(.*?)</GenericAttribute>', org_status_text, re.DOTALL | re.IGNORECASE)
    
    for block in blocks:
        description = extract_tag_value(block, "description")
        if "Rolling Review Date" in description:
            return extract_tag_value(block, "date")
    
    return ""

# ====================================
# Main businessClass filter + parse (Output 1)
# ====================================
def parse_org_business_classes():
    for idx, row in df_CCP.iterrows():
        xml_content = row['orgBusinessClasses']
        org_status_content = row.get('orgStatus', "")

        if not xml_content or pd.isna(xml_content):
            continue

        business_classes = re.findall(r'<businessClass>(.*?)</businessClass>', xml_content, re.DOTALL | re.IGNORECASE)

        for bc in business_classes:
            domain = extract_tag_value(bc, "domain")
            classification = extract_tag_value(bc, "classification")
            classification_desc = extract_tag_value(bc, "classificationDesc")
            parent_classification_code = extract_tag_value(bc, "parentClassificationCode")
            parent_classification = extract_tag_value(bc, "parentClassification")

            if domain in ["CLMPR", "KYDNT", "ACCA"]:
                pass
            elif domain == "CLMFO" and classification in allowed_clmfo_classifications:
                pass
            else:
                continue

            base_record = row.drop(labels=['orgBusinessClasses', 'orgStatus']).to_dict()

            base_record.update({
                'domain': domain,
                'classification': classification,
                'classificationDesc': classification_desc,
                'parentClassificationCode': parent_classification_code,
                'parentClassification': parent_classification,
                'Review Date': extract_review_date(org_status_content)
            })

            parsed_rows.append(base_record)

# ====================================
# NEW: Review Date Only Parser (Output 3)
# ====================================
def parse_review_dates_only():
    output_rows = []

    for idx, row in df_CCP.iterrows():
        review_date = extract_review_date(row.get("orgStatus", ""))
        
        base_record = row.drop(labels=["orgBusinessClasses", "orgStatus"]).to_dict()
        base_record["Review Date"] = review_date

        # If you need businessClass parsing too for Output #3:
        # bc_xml = row.get("orgBusinessClasses", "")
        # business_classes = re.findall(r'<businessClass>(.*?)</businessClass>', bc_xml, re.DOTALL | re.IGNORECASE)
        # for bc in business_classes:
        #     domain = extract_tag_value(bc, "domain")
        #     classification = extract_tag_value(bc, "classification")
        #     ... (append fields to base_record if needed)

        output_rows.append(base_record)

    return output_rows

# ====================================
# Execute parsing for Output 1
# ====================================
parse_org_business_classes()

original_columns = [col for col in df_CCP.columns if col not in ['orgBusinessClasses', 'orgStatus']]
final_columns_1 = original_columns + parsed_fields

df_CCP_Parsed = pd.DataFrame(parsed_rows, columns=final_columns_1)
for col in df_CCP_Parsed.columns:
    df_CCP_Parsed[col] = df_CCP_Parsed[col].astype(str)

Alteryx.write(df_CCP_Parsed, 1)

# ====================================
# Execute parsing for Output 3
# ====================================
review_rows = parse_review_dates_only()

final_columns_3 = original_columns + ["Review Date"]
df_CCP_Review = pd.DataFrame(review_rows, columns=final_columns_3)
for col in df_CCP_Review.columns:
    df_CCP_Review[col] = df_CCP_Review[col].astype(str)

Alteryx.write(df_CCP_Review, 3)
